---
import Layout from '@/layouts/Layout.astro';
import { getCollection } from 'astro:content'; // For getStaticPaths
import { getPropiedadesFiltradas } from '@/utils/propiedades.js';
import CardMain from '@/components/Tarjetas/TarjetasPropiedades.jsx';
import Pagination from '@/components/ListadoPropiedades/PaginacionListadoPropiedades.jsx';
import Breadcrumbs from '@/components/Breadcrumbs.jsx';
import { ciudades, tiposDePropiedad, tiposDePropiedadAlquiler } from '@/components/Buscador.jsx';

// Configuración
const PAGE_SIZE = 8;
const DEFAULT_PAGE = 1;

export async function getStaticPaths() {
  const paths = [];
  const todasLasPropiedades = await getCollection('propiedades');

  // Rutas para Venta
  for (const ciudad of ciudades) {
    for (const tipo of tiposDePropiedad) {
      const propiedadesFiltradas = todasLasPropiedades.filter(propiedad =>
        propiedad.data.operation === 'venta' &&
        propiedad.data.city === ciudad.key &&
        propiedad.data.propertyType === tipo.key
      );
      paths.push({
        params: { operacion: 'venta', ciudad: ciudad.key, tipoPropiedad: tipo.key },
        props: { totalPropiedades: propiedadesFiltradas.length, ciudadNombre: ciudad.label, tipoNombre: tipo.label }
      });
    }
  }

  // Rutas para Alquiler
  for (const ciudad of ciudades) {
    for (const tipo of tiposDePropiedadAlquiler) {
      const propiedadesFiltradas = todasLasPropiedades.filter(propiedad =>
        propiedad.data.operation === 'alquiler' &&
        propiedad.data.city === ciudad.key &&
        propiedad.data.propertyType === tipo.key
      );
      paths.push({
        params: { operacion: 'alquiler', ciudad: ciudad.key, tipoPropiedad: tipo.key },
        props: { totalPropiedades: propiedadesFiltradas.length, ciudadNombre: ciudad.label, tipoNombre: tipo.label }
      });
    }
  }

  return paths;
}

// Validar parámetros
const { operacion, ciudad, tipoPropiedad } = Astro.params;
const { totalPropiedades, ciudadNombre, tipoNombre } = Astro.props;

const url = new URL(Astro.request.url);
const ambientesFilter = url.searchParams.get('ambientes');

// Validación
if (!operacion || !ciudad || !tipoPropiedad || !['venta', 'alquiler'].includes(operacion)) {
  return Astro.redirect('/404');
}

// Obtener propiedades filtradas usando el nuevo util
const propiedadesFiltradas = await getPropiedadesFiltradas({
  operacion,
  ciudad,
  tipoPropiedad,
  ambientes: ambientesFilter
});

// Calcular paginación
const totalPages = Math.ceil(propiedadesFiltradas.length / PAGE_SIZE);
const rawCurrentPage = parseInt(Astro.url.searchParams.get('page') || DEFAULT_PAGE.toString());
const currentPage = Math.max(DEFAULT_PAGE, Math.min(rawCurrentPage || DEFAULT_PAGE, totalPages || DEFAULT_PAGE));

// Redireccionar si la página es inválida
if (totalPages > 0 && rawCurrentPage !== currentPage) {
  const redirectUrl = new URL(Astro.request.url);
  redirectUrl.searchParams.set('page', currentPage.toString());
  return Astro.redirect(redirectUrl.pathname + redirectUrl.search);
}

// Obtener propiedades paginadas
const startIndex = (currentPage - 1) * PAGE_SIZE;
const endIndex = startIndex + PAGE_SIZE;
const pagedPropiedades = propiedadesFiltradas.slice(startIndex, endIndex);

// Generar metadata
let pageTitle = `${operacion.charAt(0).toUpperCase() + operacion.slice(1)} de ${tipoNombre} en ${ciudadNombre}`;
let metaDescription = `Encuentra ${propiedadesFiltradas.length} propiedades en ${operacion} de ${tipoNombre} en ${ciudadNombre}`;

if (ambientesFilter) {
  const ambientesText = ambientesFilter === '5+' ? '5 o más ambientes' : `${ambientesFilter} ambiente${ambientesFilter === '1' ? '' : 's'}`;
  pageTitle += ` con ${ambientesText}`;
  metaDescription += ` con ${ambientesText}`;
}

if (totalPages > 1) {
  pageTitle += ` - Página ${currentPage} de ${totalPages}`;
  metaDescription += `. Página ${currentPage} de ${totalPages}.`;
}

// Generar URL canónica
const baseUrl = `/propiedades/${operacion}/${ciudad}/${tipoPropiedad}`;
let canonicalUrl = baseUrl;
const params = new URLSearchParams();
if (ambientesFilter) {
  params.append('ambientes', ambientesFilter);
}
if (totalPages > 1) {
  params.append('page', currentPage.toString());
}
if (params.toString()) {
  canonicalUrl += `?${params.toString()}`;
}
---
<Layout
  title={pageTitle}
  description={metaDescription}
  canonical={canonicalUrl}
>
  <!-- Schema.org para SEO -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    "name": pageTitle,
    "description": metaDescription,
    "numberOfItems": propiedadesFiltradas.length,
    "url": Astro.url.href
  })} />

  <Breadcrumbs client:load pathname={Astro.url.pathname} />
  <main class=" mx-auto max-w-7xl pb-8 p-4">

    <!-- Grid de propiedades -->
    <section class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6  mx-auto" aria-label="Lista de propiedades">
      {pagedPropiedades.length > 0 ? (
        pagedPropiedades.map((propiedad, index) => (
          <CardMain
            client:load
            title={propiedad.data.title}
            description={propiedad.data.description}
            price={`${propiedad.data.currency} ${propiedad.data.price.toLocaleString()}`}
            image={propiedad.data.image}
            slug={propiedad.slug}
            loading={index < 4 ? 'eager' : 'lazy'}
          />
        ))
      ) : (
        <div class="col-span-full text-center py-16">
          <div class="max-w-md mx-auto">
            {/* Placeholder for empty state */}
          </div>
        </div>
      )}
    </section>

    <!-- Paginación -->
    {totalPages > 1 && (
      <nav class="flex justify-center mt-12" aria-label="Navegación de páginas">
        <Pagination
          client:load
          total={totalPages}
          initialPage={currentPage}
          aria-label={`Página ${currentPage} de ${totalPages}`}
        />
      </nav>
    )}

    <!-- Enlaces de paginación para SEO -->
    {totalPages > 1 && (
      <div class="hidden">
        {currentPage > 1 && (
          <link rel="prev" href={`${baseUrl}?${new URLSearchParams({
            ...(ambientesFilter && { ambientes: ambientesFilter }),
            page: (currentPage - 1).toString()
          }).toString()}`} />
        )}
        {currentPage < totalPages && (
          <link rel="next" href={`${baseUrl}?${new URLSearchParams({
            ...(ambientesFilter && { ambientes: ambientesFilter }),
            page: (currentPage + 1).toString()
          }).toString()}`} />
        )}
      </div>
    )}
  </main>
</Layout>

<style>
  /* Optimización de carga */
  .container {
    contain: layout style;
  }

  /* Mejora de accesibilidad */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>
