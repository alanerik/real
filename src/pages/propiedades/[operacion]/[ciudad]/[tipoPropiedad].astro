---
import Layout from '@/layouts/Layout.astro';
import { getCollection } from 'astro:content';
import CardMain from '@/components/CardMain.jsx';
import Pagination from '@/components/Pagination.jsx';
import Breadcrumbs from '@/components/Breadcrumbs.jsx';
import { ciudades, tiposDePropiedad, tiposDePropiedadAlquiler } from '@/components/Buscador.jsx';

// Configuración
const PAGE_SIZE = 8;
const DEFAULT_PAGE = 1;

export async function getStaticPaths() {
  const paths = [];
  const todasLasPropiedades = await getCollection('propiedades');
  
  // Pre-computar propiedades por ruta para optimización
  const propiedadesPorRuta = new Map();

  // Rutas para Venta
  for (const ciudad of ciudades) {
    for (const tipo of tiposDePropiedad) {
      const routeKey = `venta-${ciudad.key}-${tipo.key}`;
      const propiedadesFiltradas = todasLasPropiedades.filter(propiedad => 
        propiedad.data.operation === 'venta' &&
        propiedad.data.city === ciudad.key &&
        propiedad.data.propertyType === tipo.key
      );
      
      propiedadesPorRuta.set(routeKey, propiedadesFiltradas);
      
      paths.push({
        params: {
          operacion: 'venta',
          ciudad: ciudad.key,
          tipoPropiedad: tipo.key
        },
        props: {
          totalPropiedades: propiedadesFiltradas.length,
          ciudadNombre: ciudad.label,
          tipoNombre: tipo.label
        }
      });
    }
  }

  // Rutas para Alquiler
  for (const ciudad of ciudades) {
    for (const tipo of tiposDePropiedadAlquiler) {
      const routeKey = `alquiler-${ciudad.key}-${tipo.key}`;
      const propiedadesFiltradas = todasLasPropiedades.filter(propiedad => 
        propiedad.data.operation === 'alquiler' &&
        propiedad.data.city === ciudad.key &&
        propiedad.data.propertyType === tipo.key
      );
      
      propiedadesPorRuta.set(routeKey, propiedadesFiltradas);
      
      paths.push({
        params: {
          operacion: 'alquiler',
          ciudad: ciudad.key,
          tipoPropiedad: tipo.key
        },
        props: {
          totalPropiedades: propiedadesFiltradas.length,
          ciudadNombre: ciudad.label,
          tipoNombre: tipo.label
        }
      });
    }
  }

  return paths;
}

// Validar parámetros
const { operacion, ciudad, tipoPropiedad } = Astro.params;
const { totalPropiedades, ciudadNombre, tipoNombre } = Astro.props;

// NUEVO: Obtener filtro de ambientes de la URL
const url = new URL(Astro.request.url);
const ambientesFilter = url.searchParams.get('ambientes');

// Validación de parámetros críticos
if (!operacion || !ciudad || !tipoPropiedad) {
  return Astro.redirect('/404');
}

// Validar operación permitida
const operacionesValidas = ['venta', 'alquiler'];
if (!operacionesValidas.includes(operacion)) {
  return Astro.redirect('/404');
}

// Obtener propiedades filtradas
const todasLasPropiedades = await getCollection('propiedades');

// ACTUALIZADO: Aplicar TODOS los filtros, incluyendo ambientes
const propiedadesFiltradas = todasLasPropiedades.filter(propiedad => {
  const { data } = propiedad;
  
  // Filtros básicos
  const matchesOperation = data.operation === operacion;
  const matchesCity = data.city === ciudad;
  const matchesType = data.propertyType === tipoPropiedad;
  
  // NUEVO: Filtro por ambientes
  let matchesAmbientes = true;
  
  if (ambientesFilter) {
    if (ambientesFilter === '5+') {
      // Para "5+ ambientes"
      matchesAmbientes = (data.ambientes || 0) >= 5;
    } else {
      // Para números exactos
      matchesAmbientes = data.ambientes === parseInt(ambientesFilter);
    }

  }
  
  return matchesOperation && matchesCity && matchesType && matchesAmbientes;
});

// Calcular paginación
const totalPages = Math.ceil(propiedadesFiltradas.length / PAGE_SIZE);
const rawCurrentPage = parseInt(Astro.url.searchParams.get('page') || DEFAULT_PAGE.toString());
const currentPage = Math.max(DEFAULT_PAGE, Math.min(rawCurrentPage || DEFAULT_PAGE, totalPages || DEFAULT_PAGE));

// Redireccionar si la página es inválida y hay propiedades
if (totalPages > 0 && rawCurrentPage !== currentPage) {
  const redirectUrl = new URL(Astro.request.url);
  redirectUrl.searchParams.set('page', currentPage.toString());
  return Astro.redirect(redirectUrl.pathname + redirectUrl.search);
}

// Obtener propiedades paginadas
const startIndex = (currentPage - 1) * PAGE_SIZE;
const endIndex = startIndex + PAGE_SIZE;
const pagedPropiedades = propiedadesFiltradas.slice(startIndex, endIndex);

// ACTUALIZADO: Generar metadata dinámica incluyendo filtro de ambientes
let pageTitle = `${operacion.charAt(0).toUpperCase() + operacion.slice(1)} de ${tipoNombre} en ${ciudadNombre}`;
let metaDescription = `Encuentra ${propiedadesFiltradas.length} propiedades en ${operacion} de ${tipoNombre} en ${ciudadNombre}`;

// Agregar info de ambientes al título si hay filtro
if (ambientesFilter) {
  const ambientesText = ambientesFilter === '5+' ? '5 o más ambientes' : `${ambientesFilter} ambiente${ambientesFilter === '1' ? '' : 's'}`;
  pageTitle += ` con ${ambientesText}`;
  metaDescription += ` con ${ambientesText}`;
}

// Agregar info de paginación
if (totalPages > 1) {
  pageTitle += ` - Página ${currentPage} de ${totalPages}`;
  metaDescription += `. Página ${currentPage} de ${totalPages}.`;
}

// ACTUALIZADO: Generar URLs canónicas manteniendo el filtro de ambientes
const baseUrl = `/propiedades/${operacion}/${ciudad}/${tipoPropiedad}`;
let canonicalUrl = baseUrl;

// Construir URL con parámetros
const params = new URLSearchParams();
if (ambientesFilter) {
  params.append('ambientes', ambientesFilter);
}
if (totalPages > 1) {
  params.append('page', currentPage.toString());
}

if (params.toString()) {
  canonicalUrl += `?${params.toString()}`;
}

---

<Layout 
  title={pageTitle}
  description={metaDescription}
  canonical={canonicalUrl}
>
  <!-- Schema.org para SEO -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    "name": pageTitle,
    "description": metaDescription,
    "numberOfItems": propiedadesFiltradas.length,
    "url": Astro.url.href
  })} />

  <Breadcrumbs client:load pathname={Astro.url.pathname} />
  <main class=" mx-auto max-w-7xl pb-8 p-4">

    <!-- Header con información -->
    <header class="bg-white p-6 rounded-lg shadow-md border border-gray-200 mb-8">
      <div class="flex justify-between items-start">
        <div>
            <!-- ACTUALIZADO: Mostrar filtro activo de ambientes -->
            <p class="text-lg font-thin text-gray-600">
                {ambientesFilter && (
                  <span class="inline-block bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-sm mr-2">
                    {ambientesFilter === '5+' ? '5+ ambientes' : `${ambientesFilter} ambiente${ambientesFilter === '1' ? '' : 's'}`}
                  </span>
                )}
                Resultados {totalPages > 1 ? `(Página ${currentPage} de ${totalPages})` : ''}
            </p>
            <h1 class="text-3xl font-bold text-gray-900">
                {propiedadesFiltradas.length} 
                {propiedadesFiltradas.length === 1 ? 'propiedad' : 'propiedades'} 
                de {tipoNombre} en {operacion} en {ciudadNombre}
                {ambientesFilter && (
                  <span class="text-2xl text-gray-600">
                    {ambientesFilter === '5+' ? ' con 5+ ambientes' : ` con ${ambientesFilter} ambiente${ambientesFilter === '1' ? '' : 's'}`}
                  </span>
                )}
            </h1>
        </div>
        <div class="text-right">
            {totalPages > 1 && (
                <p class="text-sm text-gray-600">
                Mostrando {startIndex + 1}-{Math.min(endIndex, propiedadesFiltradas.length)} de {propiedadesFiltradas.length} resultados
                </p>
            )}
        </div>
      </div>
    </header>

    <!-- Grid de propiedades -->
    <section class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6  mx-auto" aria-label="Lista de propiedades">
      {pagedPropiedades.length > 0 ? (
        pagedPropiedades.map((propiedad, index) => (
          <CardMain
            client:load
            title={propiedad.data.title}
            description={propiedad.data.description}
            price={`${propiedad.data.currency} ${propiedad.data.price.toLocaleString()}`}
            image={propiedad.data.image}
            slug={propiedad.slug}
            loading={index < 4 ? 'eager' : 'lazy'}
          />
        ))
      ) : (
        <div class="col-span-full text-center py-16">
          <div class="max-w-md mx-auto">
            <h2 class="text-xl font-semibold text-gray-900 mb-2">
              No se encontraron propiedades
            </h2>
            <p class="text-gray-600 mb-6">
              No hay propiedades disponibles de {tipoNombre} en {operacion} en {ciudadNombre}
              {ambientesFilter && (
                <span>
                  {' '}con {ambientesFilter === '5+' ? '5 o más ambientes' : `${ambientesFilter} ambiente${ambientesFilter === '1' ? '' : 's'}`}
                </span>
              )}.
            </p>
            <div class="space-x-4">
              <a 
                href={`/propiedades/${operacion}/${ciudad}/${tipoPropiedad}`}
                class="inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Ver todas en {ciudadNombre}
              </a>
              <a 
                href={`/propiedades/${operacion}`}
                class="inline-block px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Explorar {operacion}
              </a>
            </div>
          </div>
        </div>
      )}
    </section>

    <!-- Paginación -->
    {totalPages > 1 && (
      <nav class="flex justify-center mt-12" aria-label="Navegación de páginas">
        <Pagination 
          client:load 
          total={totalPages} 
          initialPage={currentPage}
          aria-label={`Página ${currentPage} de ${totalPages}`}
        />
      </nav>
    )}

    <!-- Enlaces de paginación para SEO -->
    {totalPages > 1 && (
      <div class="hidden">
        {currentPage > 1 && (
          <link rel="prev" href={`${baseUrl}?${new URLSearchParams({
            ...(ambientesFilter && { ambientes: ambientesFilter }),
            page: (currentPage - 1).toString()
          }).toString()}`} />
        )}
        {currentPage < totalPages && (
          <link rel="next" href={`${baseUrl}?${new URLSearchParams({
            ...(ambientesFilter && { ambientes: ambientesFilter }),
            page: (currentPage + 1).toString()
          }).toString()}`} />
        )}
      </div>
    )}
  </main>
</Layout>

<style>
  /* Optimización de carga */
  .container {
    contain: layout style;
  }
  
  /* Mejora de accesibilidad */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>